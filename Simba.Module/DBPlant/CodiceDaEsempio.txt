  void InsertSchedeMPsuApparato(ref Apparato NuovoApparato, int OidStdApparato)
        {

            // XPCollection<SchedaMp> listaSKFiltrata;
            var lstSchedaMP = new XPCollection<SchedaMp>(this.Session);
            IEnumerable<SchedaMp> TmplstSchedaMP = lstSchedaMP.Where(sk => sk.Eqstd.Oid == OidStdApparato);
            XPCollection<SchedaMp> listaSKFiltrata = new XPCollection<SchedaMp>(Session, false);
            listaSKFiltrata.AddRange(TmplstSchedaMP);
            //string crListaSchedaMps = string.Format("Eqstd.Oid In ({0})", APPARATOes[i].StdApparato.Oid);
            // lstSchedaMP..Criteria = CriteriaOperator.Parse(crListaSchedaMps);
            // int mio = lstSchedaMP.

            foreach (SchedaMp item in listaSKFiltrata)
            {
                NuovoApparato.AppSchedaMpes.Add(new ApparatoSchedaMP(this.Session)
                {
                    SchedaMp = item,
                    Abilitato = FlgAbilitato.Si
                });
            }
        }




		                //for (int i = 0; i < Cur.AssRisorseTeam.Count(); i++)
                //{
                //    if (Cur.AssRisorseTeam[i].Risorsa != Cur.RisorsaCapo)
                //    {
                //        OidAssRisorsaTeam = Cur.AssRisorseTeam[i].Oid;
                //        Session theSession = Cur.AssRisorseTeam[i].Session;
                //        theSession.Delete(Cur.AssRisorseTeam[i]);
                //       // theSession.Save(Cur.AssRisorseTeam[i]);
                //        theSession.PurgeDeletedObjects();
                //        break;
                //        // row.Delete();
                //       // Cancrow = new AssRisorseTeam();
                //        //Cur.AssRisorseTeam[i].Delete();
                //        //Cur.AssRisorseTeam.Remove(Cur.AssRisorseTeam[i]);
                //    }
                //}

               // AssRisorseTeam aa = new AssRisorseTeam(Cur.Session);
                //AssRisorseTeam aa = View.ObjectSpace.GetObjectByKey<AssRisorseTeam>(OidAssRisorsaTeam);
                //Cur.AssRisorseTeam.Remove(aa);
                //Cur.Session.PurgeDeletedObjects();
               // aa = (AssRisorseTeam)Cur.AssRisorseTeam;
               // aa.EliminaAssociazione(OidAssRisorsaTeam);
                

                //Session theSession = aa.Session;
                //theSession.Delete(aa);
                //theSession.Save(aa);
                //Session theSession =  Cur.AssRisorseTeam.Session;
                //XPCollection colDelete = new XPCollection(typeof(AssRisorseTeam), new BinaryOperator("Oid", OidAssRisorsaTeam)); // Objects for deletion.
                //theSession.Delete(colDelete);
                //theSession.Save(colDelete);
              //  Cur.Save();
			 

			  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

			  
        #region KDIMENSIONE FITRATO
        //private XPCollection<KDimensione> listaFiltratakd;
        //[NonPersistent, DisplayName("Coefficiente dimensione")]
        //[System.ComponentModel.Browsable(false)] 
        //public XPCollection<KDimensione> KDimensioneFiltrati
        //{
        //    get
        //    {
        //        if (listaFiltratakd == null)
        //        {
        //            var lstKDimensione = new XPCollection<KDimensione>(this.Session);

        //            // Filtra i KDimensione per apparato
        //            IEnumerable<KDimensione> tmpLst = lstKDimensione.Where(smp => smp.StandardApparato == this.StdApparato).Distinct();

        //            listaFiltratakd = new XPCollection<KDimensione>(Session, false);
        //            listaFiltratakd.AddRange(tmpLst);
        //        }

        //        return listaFiltratakd;
        //    }
        //    set { }
        //}
        #endregion


		//////////////////////////////////
		da apparato
		
        //private XPCollection<ApparatokCondizione> flistakCondizione;
        //[NonPersistent, DisplayName("Coefficienti Condizione Disponibili")]
        //[System.ComponentModel.Browsable(false),MemberDesignTimeVisibility(false)]
        //public XPCollection<ApparatokCondizione> listakCondizione
        //{
        //    get
        //    {
        //        if (flistakCondizione == null)
        //        {
        //            flistakCondizione = new XPCollection<ApparatokCondizione>(this.Session,false);
        //            var lstKCondizione = new XPCollection<KCondizione>(this.Session);

        //private XPCollection<ApparatokCondizione> flistakCondizione;
        //[NonPersistent, DisplayName("Coefficienti Condizione Disponibili")]
        //[System.ComponentModel.Browsable(false),MemberDesignTimeVisibility(false)]
        //public XPCollection<ApparatokCondizione> listakCondizione
        //{
        //    get
        //    {
                //if (flistakCondizione == null)
                //{
                //    flistakCondizione = new XPCollection<ApparatokCondizione>(this.Session,false);
                //    var lstKCondizione = new XPCollection<KCondizione>(this.Session);



        //            foreach (KCondizione item in lstKCondizione)
        //            {
        //                //ApparatokCondizione NuovoApparatokCondizione = new ApparatokCondizione(this.Session) { Apparato = this, Descrizione = item.Descrizione, Valore = item.Valore };
        //                flistakCondizione.Add(new ApparatokCondizione(this.Session) { Apparato = this, Descrizione = item.Descrizione, Valore = item.Valore });
        //            }

                //    foreach (KCondizione item in lstKCondizione)
                //    {
                //        //ApparatokCondizione NuovoApparatokCondizione = new ApparatokCondizione(this.Session) { Apparato = this, Descrizione = item.Descrizione, Valore = item.Valore };
                //        flistakCondizione.Add(new ApparatokCondizione(this.Session) { Apparato = this, Descrizione = item.Descrizione, Valore = item.Valore });
                //    }

        //        }

                //}


        //        return flistakCondizione;
        //    } 
        //}







		using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using DevExpress.Persistent.Base;
using CAMS.Module.DBALibrary;
using DevExpress.Persistent.Validation;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.ConditionalAppearance;
using System.Linq;
using System.Collections.Generic;
using DevExpress.ExpressApp.Model;
using CAMS.Module.Classi;
using CAMS.Module.DBTask.Guasti;
using CAMS.Module.DBPlant.Coefficienti;
using DevExpress.Persistent.BaseImpl;
// DA FARE: QUANDO SI CREANO APPARATI DALLA FUNZIONE MASSIVA : QUANTITA PER APPARATO
//           NON SI POPOLA LA TABELLA ApparatoSchedaMP . INSERIRE IL CODICE DI COPIA DELLE SCHEDE ANCHE IN QUESTA TABELLA!!!!
namespace CAMS.Module.DBPlant
{
    [DefaultClassOptions, Persistent("APPARATO")]
   // [System.ComponentModel.DefaultProperty("Descrizione")]
    [DevExpress.ExpressApp.Model.ModelDefault("Caption", "Apparati")]
    [ImageName("LoadPageSetup")]
    public class Apparato : XPObject
    {
        public const string NA = "N/A";
        public const string FormattazioneCodice = "{0:000}";

        public Apparato() : base() { }
        public Apparato(Session session) : base(session) { }
        public override void AfterConstruction() { 
            base.AfterConstruction();
           // this.KGuasto = 1;
        }
        protected override void OnSaving()
        {
            #region Salvataggio del CodDescrizione in transazione
            if (!IsDeleted && CodDescrizione == NA)
            {
                CodDescrizione = String.Format("{0}_{1}_{2}", Impianto.CodDescrizione, StdApparato.CodDescrizione,
                                 String.Format(FormattazioneCodice,
                                 Convert.ToInt32(Session.Evaluate<Apparato>(CriteriaOperator.Parse("Count"),
                                 new BinaryOperator(Impianto.Fields.Oid.PropertyName.ToString(), Impianto.Oid))) + 1));
            }
            #endregion
        }

        public Apparato CloneFrom(Apparato apparatoSelezionato)
        {
            this.CodDescrizione = apparatoSelezionato.CodDescrizione;
            this.Descrizione = apparatoSelezionato.Descrizione;
            this.StdApparato = apparatoSelezionato.StdApparato;
            this.DataSheet = apparatoSelezionato.DataSheet;
            this.Quantita = apparatoSelezionato.Quantita;
            this.KCondizione = apparatoSelezionato.KCondizione;
            //this.KDimensione = apparatoSelezionato.KDimensione;ARM
            this.KUbicazione = apparatoSelezionato.KUbicazione;
           // this.KTrasferimento = apparatoSelezionato.KTrasferimento;
            this.KGuasto = apparatoSelezionato.KGuasto;
            this.KUtenza = apparatoSelezionato.KUtenza;
            this.Quantita = apparatoSelezionato.Quantita;
            this.Utente = SecuritySystem.CurrentUserName.ToString();
            this.DataAggiornamento = DateTime.Now;

            return this;
        }

        #region   DESCRIZIONE
        string fDescrizione;
        [Persistent("DESCRIZIONE"), Size(100)]
        [DbType("varchar(100)")]
        [RuleRequiredField("RReqField.Apparato.Descrizione", DefaultContexts.Save, "La Descrizione è un campo obbligatorio")]
        public string Descrizione { get { return fDescrizione; } set { SetPropertyValue<string>("Descrizione", ref fDescrizione, value); } }

        string fCodDescrizione;
        [Persistent("COD_DESCRIZIONE"), Size(18), DisplayName("Cod Descrizione"), Appearance("Apparato.CodDescrizione", Enabled = false)]
        [DbType("varchar(18)")]
        public string CodDescrizione
        {
            get
            {
                if (!IsLoading && !IsSaving && fCodDescrizione == null)
                    fCodDescrizione = NA;
                return fCodDescrizione;
            }
            set { SetPropertyValue<string>("CodDescrizione", ref fCodDescrizione, value); }
        }
        #endregion

        #region IMPIANTO
        Impianto fImpianto;
        [Association(@"IMPIANTIRefAPPARATO"), Persistent("IMPIANTO"), DisplayName("Impianto")]
        //[RuleRequiredField("Apparato.Impianto", DefaultContexts.Save, "L'impianto è un campo obbligatorio")]
        [Appearance("Apparato.Impianto", Enabled = false, Criteria = "!IsNullOrEmpty(Impianto)", Context = "DetailView")]
        public Impianto Impianto
        {
            get { return fImpianto; }
            set { SetPropertyValue<Impianto>("Impianto", ref fImpianto, value); }
        }
        #endregion

        #region ID IMPIANTO
        [NonPersistent]
        [System.ComponentModel.Browsable(false)]
        public int OidImpianto { get; set; }
        #endregion

        #region   Relazioni PADRE - APPARATORefSCHEDAPMP; APPARATOKCORRETTIVIRefAPPARATO
        [Association(@"APPARATORefAPPSCHEDAMP", typeof(ApparatoSchedaMP)), DisplayName("Attività di Manutenzione Programmata Associate")]//Aggregated
        public XPCollection<ApparatoSchedaMP> AppSchedaMpes { get { return GetCollection<ApparatoSchedaMP>("AppSchedaMpes"); } }


        #endregion

       

        

        #region STDAPPARATO

        StdApparato fStdApparato;
        [Size(1000), Persistent("STDAPPARATO"), DisplayName("Standard Apparato")]
        [RuleRequiredField("Apparato.StdApparato", DefaultContexts.Save, "Lo Standard Apparato è un campo obbligatorio")]
        [Appearance("Apparato.StdApparato", Enabled = false, Criteria = "!IsNullOrEmpty(StdApparato)", Context = "DetailView")]
        [ImmediatePostData]
        public StdApparato StdApparato
        {
            get { return fStdApparato; }
            set { SetPropertyValue<StdApparato>("StdApparato", ref fStdApparato, value);
            OnChanged("KDimensioneFiltrati");
            }
        }

        #endregion

        #region DATASHEET
        DevExpress.Persistent.BaseImpl.FileData fDataSheet;
        [Size(1000), Persistent("DATASHEET"), DisplayName("Data Sheet"), VisibleInListView(false),VisibleInLookupListView(false)]
        public DevExpress.Persistent.BaseImpl.FileData DataSheet
        {
            get { return fDataSheet; }
            set { SetPropertyValue<DevExpress.Persistent.BaseImpl.FileData>("DataSheet", ref fDataSheet, value); }
        }
        #endregion

        #region QUANTITA'
        int fQuantita;
        [Persistent("QUANTITA"), DisplayName("Quantità"), DevExpress.ExpressApp.Model.ModelDefault("DisplayFormat", "0")]
        public int Quantita
        {
            get { return fQuantita; }
            set { SetPropertyValue<int>("Quantita", ref fQuantita, value); }
        }
        #endregion

        #region   relazione albero apparecchiature
        Apparato fApparatoPadre;
        [Persistent("APPARATOPADRE"), DisplayName("Apparato Padre")]
        // [DataSourceProperty("KDimensioneFiltrati")] 
        [DataSourceCriteria("Impianto.Oid = '@This.Impianto.Oid' And Oid != '@This.Oid'")]
        public Apparato ApparatoPadre
        {
            get {   //  this.Impianto.Oid
                return fApparatoPadre; }
            set { SetPropertyValue<Apparato>("ApparatoPadre", ref fApparatoPadre, value); }
        }

        #endregion
        #region   COEFFICIENTI CORRETTIVI RELAZIONE PADRE
        //commenta
        //KDimensione fKDimensione;
        //[Persistent("KDIMENSIONE"), DisplayName("Coefficiente Dimensione")]
        //// [DataSourceProperty("KDimensioneFiltrati")] 
        //[DataSourceCriteria("StandardApparato.Oid = '@This.StdApparato.Oid'")]
        //public KDimensione KDimensione
        //{
        //    get { return fKDimensione; }
        //    set { SetPropertyValue<KDimensione>("KDimensione", ref fKDimensione, value); }
        //}


        //ApparatokDimensione fApparatoKDimensione;
        //[Persistent("APPKDIMENSIONE"), DisplayName("Coefficiente Dimensione Selezionato")]
        //[DataSourceProperty("KDimensione")] 
        //[DataSourceCriteria("StandardApparato.Oid = '@This.StdApparato.Oid'")]
        //public ApparatokDimensione ApparatokDimensione
        //{
        //    get { return fApparatoKDimensione; }
        //    set { SetPropertyValue<ApparatokDimensione>("ApparatoKDimensione", ref fApparatoKDimensione, value); }
        //}


        KCondizione fKCondizione;//-
        [Persistent("KCONDIZIONE"), DisplayName("Coefficiente Condizione")]
        [System.ComponentModel.Browsable(false), MemberDesignTimeVisibility(false)]
        public KCondizione KCondizione
        {
            get { return fKCondizione; }
            set { SetPropertyValue<KCondizione>("KCondizione", ref fKCondizione, value); }
        }

        ApparatokCondizione fApparatokCondizione;//-
        [Persistent("APPKCONDIZIONE"), DisplayName("Coefficiente Condizione Selezionato")] 
        //[DataSourceProperty("listakCondizione")] 
 
        public ApparatokCondizione ApparatokCondizione
        {
            get { return fApparatokCondizione; }
            set { SetPropertyValue<ApparatokCondizione>("ApparatokCondizione", ref fApparatokCondizione, value); }
        }

        KUbicazione fKUbicazione;//-
        [Persistent("KUBICAZIONE"), DisplayName("Coefficiente Ubicazione")]
        public KUbicazione KUbicazione
        {
            get { return fKUbicazione; }
            set { SetPropertyValue<KUbicazione>("KUbicazione", ref fKUbicazione, value); }
        }

        KGuasto fKGuasto;
        [Persistent("KGUASTO"), DisplayName("Coefficiente Guasto")]
        [System.ComponentModel.DefaultValue(1)]
        public KGuasto KGuasto
        {
            get { return fKGuasto; }
            set { SetPropertyValue<KGuasto>("KGuasto", ref fKGuasto, value); }
        }
        
        //TOTALE COEFFICIENTE DOUBLE
        double fTotaleCoefficienti;
        [Persistent("TOTALECOEFFICIENTI")]
        //ATTR ENABLE
        public double TotaleCoefficienti
        {
            get { return fTotaleCoefficienti; }
            set { SetPropertyValue<double>("TotaleCoefficienti", ref fTotaleCoefficienti, value); }
        }

        // ereditato dall'impianto  -  RENDERE IL CAMPO DINAMICO ###
        //double fKTrasferimento;
        //[Persistent("KTRASFERIMENTO"), DisplayName("Coefficiente Trasferimento")]
        //public double KTrasferimento
        //{
        //    get { return fKTrasferimento; }
        //    set { SetPropertyValue<double>("KTrasferimento", ref fKTrasferimento, value); }
        //}

        double fKTrasferimento;
        [NonPersistent(), DisplayName("Coefficiente Trasferimento")]
        public double KTrasferimento
        {
            get {
                object tempImpianto = this.Impianto;
                if (tempImpianto != null)
                {
                    object tempClusterImpianti = this.Impianto.ClusterImpianti;
                    if (tempClusterImpianti != null)
                    {
                        if (this.Impianto.ClusterImpianti.Presidiato == Presidiato.Si)
                           return 15;
                        else
                           return 0;                        
                    }
                }
                return 0;                 
               // return fKTrasferimento;
            }
           // set { SetPropertyValue<double>("KTrasferimento", ref fKTrasferimento, value); }
        }

        // ereditato dall'impianto  -  RENDERE IL CAMPO DINAMICO ###
        KUtenza fKUtenza;
        [Persistent("KUTENZA"), DisplayName("Coefficiente Utenza")]
        public KUtenza KUtenza
        {
            get { return fKUtenza; }
            set { SetPropertyValue<KUtenza>("KUtenza", ref fKUtenza, value); }
        }
        #endregion

        #region   Property NONPersistenti

        [NonPersistent, DisplayName("Totale Tempo Lavoro MP in Sito")]
        public int QuantitaTempoAnno
        {
            get
            {
                int somma = 0;
                foreach (var ele in AppSchedaMpes) { somma += (int) ele.TempoTotOPT; }
                return somma;
            }
        }

        //CAMPO FISSO NUM APPARATI IN IMPIANTO E SOMMA TEMPO SCHEDE MP (ARMANDO)


        int fSumTempoMp;
        [Persistent("SUMTEMPOSCHEDEMP"), DisplayName("Somma Tempo SchedeMP\r\n [min.]")]
        [Appearance("Apparato.SommaTempiSchedeMP", Enabled = false)]
        public int SumTempoMp { get { return fSumTempoMp; } set { SetPropertyValue<int>("SumTempoMp", ref fSumTempoMp, value); } }
        

        [NonPersistent, DisplayName("Cluster")]
        public ClusterImpianti ClusterImpianti
        {
            get
            {
                object tempImpianto = this.Impianto;
                if (tempImpianto != null)
                {
                    object tempClusterImpianti = this.Impianto.ClusterImpianti;
                    if (tempClusterImpianti != null)
                    {
                        return this.Impianto.ClusterImpianti;
                    }
               }                
                return null;
            }
        }

        [NonPersistent, DisplayName("Scenario")]
        public Scenario Scenario
        {
            get
            {
                object tempImpianto = this.Impianto;  
                if (tempImpianto != null)
                {
                    object tempClusterImpianti = this.Impianto.ClusterImpianti;  
                     if (tempClusterImpianti != null)
                       {
                         object tempScenario = this.Impianto.ClusterImpianti.Scenario;
                         if (tempScenario != null)
                             {
                              return this.Impianto.ClusterImpianti.Scenario;
                             }
                       }
                }                
                    return null;               
                }
        }
        #endregion

        #region Utenti e registrazione
        string f_Utente;
        [Persistent("UTENTE"), Size(100), DisplayName("Utente"), Appearance("Apparato.Utente", Enabled = false)]
        [DbType("varchar(100)")]
        [VisibleInListView(false)]
        public string Utente
        {
            get
            {
                return f_Utente;
            }
            set
            {
                SetPropertyValue<string>("Utente", ref f_Utente, value);
            }
        }

        DateTime? fDataAggiornamento;
        [Persistent("DATAUPDATE"), DisplayName("Data Aggiornamento")]
        [DevExpress.ExpressApp.Model.ModelDefault("DisplayFormat", "dd/MM/yyyy H:mm:ss tt"), Appearance("Apparato.DataAggiornamento", Enabled = false)]
        [VisibleInListView(false)]
        public DateTime? DataAggiornamento
        {
            get
            {
                return fDataAggiornamento;
            }
            set { SetPropertyValue<DateTime?>("DataAggiornamento", ref fDataAggiornamento, value); }
        }
        #endregion


        ///    carica le schede di manutenzione 
        ///  <param name="NuovoApparato"> l'apparato a cui caricare le schede</param>
        /// <param name="OidStdApparato"> lo standard apparato da cui ricavare le schede</param>
       public void InsertSchedeMPsuApparato(ref Apparato NuovoApparato, int OidStdApparato)
        {
            //var lstSchedaMP = new XPCollection<SchedaMp>(this.Session);
            //IEnumerable<SchedaMp> TmplstSchedaMP = lstSchedaMP.Where(sk => sk.Eqstd.Oid == OidStdApparato);
            //XPCollection<SchedaMp> listaSKFiltrata = new XPCollection<SchedaMp>(Session, false);
            //listaSKFiltrata.AddRange(TmplstSchedaMP);
            List<SchedaMp> listaSKFiltrata = new XPCollection<SchedaMp>(Session, false).Where(sk => sk.Eqstd.Oid == OidStdApparato).ToList();

            foreach (SchedaMp item in listaSKFiltrata)
            {
                NuovoApparato.AppSchedaMpes.Add(new ApparatoSchedaMP(this.Session)
                {
                    SchedaMp = item,
                    CodPmp = item.CodPmp,
                    Sistema = item.Sistema,
                    Categoria = item.Categoria,
                    Eqstd = item.Eqstd,
                    SottoComponente = item.SottoComponente,
                    Manutenzione = item.Manutenzione,
                    FrequenzaOpt = item.FrequenzaOpt,
                    MansioniOpt = item.MansioniOpt,
                    NumMan = item.NumMan,
                    TempoOpt = item.TempoOpt,
                    Utente = SecuritySystem.CurrentUser.ToString(),
                    DataAggiornamento = DateTime.Now,
                    Abilitato = FlgAbilitato.Si
                });
            }
        }


       private XPCollection<AuditDataItemPersistent> changeHistory;
       public XPCollection<AuditDataItemPersistent> ChangeHistory
       {
           get
           {
               if (changeHistory == null)
               {
                   changeHistory = AuditedObjectWeakReference.GetAuditTrail(Session, this);
               }
               return changeHistory;
           }
       }


        public override string ToString()
        {
            return string.Format("{0}({1})", this.Descrizione, this.CodDescrizione);
        }


    }
}
