
RdLObjSpaceController
=========================================
        public RegistroSmistamentoDett CreateRegistroSmistamentoDett(RdL rdl, string tipocambio) // tipocambio:= "RSTEAM" : "SM";
        {
            DateTime RSD_ultimadata = DateTime.MinValue;
            double RSD_dminuti = 0;
            int RSD_idmin = 0;
            int RSD_ultimaOid = 0;
            int conta = rdl.RegistroRdL.RegistroSmistamentoDettaglios.Count;

            IObjectSpace xpObjSpaceRSD = Application.CreateObjectSpace();

            if (conta > 0 && rdl.RegistroRdL != null)
            {
                var listaRSD = rdl.RegistroRdL.RegistroSmistamentoDettaglios.OrderByDescending(o => o.DataOra).First();

                RSD_ultimadata = listaRSD.DataOra;
                RSD_ultimaOid = listaRSD.Oid;

                RSD_dminuti = (DateTime.Now - RSD_ultimadata).TotalMinutes;
                RSD_idmin = Convert.ToInt32(RSD_dminuti);
            }

            RegistroSmistamentoDett rsm = xpObjSpaceRSD.CreateObject<RegistroSmistamentoDett>();
            rsm.RegistroRdL = xpObjSpaceRSD.GetObject<RegistroRdL>(rdl.RegistroRdL);

            if (rdl.RisorseTeam != null)
                rsm.RisorseTeam = xpObjSpaceRSD.GetObject<RisorseTeam>(rdl.RisorseTeam);

            rsm.StatoSmistamento = xpObjSpaceRSD.GetObject<StatoSmistamento>(rdl.UltimoStatoSmistamento);

            if (SmistamentoOid_ObjectsCache.Count > 0)
                if (SmistamentoOid_ObjectsCache[0] != 0)
                    rsm.SStatoSmistamento_Old = xpObjSpaceRSD.GetObjectByKey<StatoSmistamento>(SmistamentoOid_ObjectsCache[0]);//   rdl.old_SSmistamento_Oid

            if (rdl.UltimoStatoOperativo != null)
                rsm.StatoOperativo = xpObjSpaceRSD.GetObject<StatoOperativo>(rdl.UltimoStatoOperativo);

            //if (rdl.old_SOperativo != null)
            //    rsm.StatoOperativo_Old = xpObjSpaceRSD.GetObject<StatoOperativo>(old_StatoOperativo);

            rsm.UtenteSO = SecuritySystem.CurrentUserName;
            rsm.DataOra = DateTime.Now;

            if (RSD_ultimadata != DateTime.MinValue)
                rsm.DataOra_Old = RSD_ultimadata;

            if (this.OperativoObjectsCache.Count > 0)
            {
                if (this.OperativoObjectsCache[0] == null)
                {
                    rsm.DescrizioneVariazioneStatoOperativo = string.Format("Variazione Stato Operativo {0}",
                        this.OperativoObjectsCache[1] != null ? this.OperativoObjectsCache[1].CodStato.ToString() : string.Empty);
                }
                else
                {
                    rsm.DescrizioneVariazioneStatoOperativo = string.Format("Variazione Stato Operativo da {0} a {1}",
                       this.OperativoObjectsCache[0] != null ? this.OperativoObjectsCache[0].CodStato.ToString() : string.Empty,
                        this.OperativoObjectsCache[1] != null ? this.OperativoObjectsCache[1].CodStato.ToString() : string.Empty);
                }
            }

            if (RisorsaTeamObjectsCache.Count > 0)
            {
                if (this.RisorsaTeamObjectsCache[0] == null)
                {
                    rsm.DescrizioneVariazioneRisorsaTeam = string.Format("Variazione RisorseTeam {0}",
                        this.RisorsaTeamObjectsCache[1] != null ? this.RisorsaTeamObjectsCache[1].FullName.ToString() : string.Empty);
                }
                else
                {
                    rsm.DescrizioneVariazioneRisorsaTeam = string.Format("Variazione RisorseTeam da {0} a {1}",
                       this.RisorsaTeamObjectsCache[0] != null ? this.RisorsaTeamObjectsCache[0].FullName.ToString() : string.Empty,
                        this.RisorsaTeamObjectsCache[1] != null ? this.RisorsaTeamObjectsCache[1].FullName.ToString() : string.Empty);
                }
            }

            if (this.SmistamentoOid_ObjectsCache.Count > 0)
            {
                if (this.SmistamentoOid_ObjectsCache[0] == 0) //  (this.SmistamentoObjectsCache[0] == null)
                {
                    if (this.SmistamentoOid_ObjectsCache[1] > 0)
                    {
                        string DescrizioneSmistamentoUltimo = View.ObjectSpace.GetObjectsQuery<StatoSmistamento>(false).
                            Where(w => w.Oid == SmistamentoOid_ObjectsCache[1])
                            .Select(s => s.SSmistamento).FirstOrDefault().ToString();

                        rsm.Descrizione = string.Format("Primo Stato Smistamento {0}",
                            DescrizioneSmistamentoUltimo ?? string.Empty);
                    }
                }
                else
                {
                    string DescrizioneSmistamentoOld = string.Empty;
                    string DescrizioneSmistamentoUltimo = string.Empty;
                    if (this.SmistamentoOid_ObjectsCache[0] > 0 && this.SmistamentoOid_ObjectsCache[1] > 0)
                    {
                        DescrizioneSmistamentoOld = View.ObjectSpace.GetObjectsQuery<StatoSmistamento>(false).
                           Where(w => w.Oid == SmistamentoOid_ObjectsCache[0])
                           .Select(s => s.SSmistamento).FirstOrDefault().ToString();
                        DescrizioneSmistamentoUltimo = View.ObjectSpace.GetObjectsQuery<StatoSmistamento>(false).
                           Where(w => w.Oid == SmistamentoOid_ObjectsCache[1])
                           .Select(s => s.SSmistamento).FirstOrDefault().ToString();
                    }
                    rsm.Descrizione = string.Format("Variazione Stato Smistamento da {0} a {1}",
                       DescrizioneSmistamentoOld ?? string.Empty,
                        DescrizioneSmistamentoUltimo ?? string.Empty);
                }
            }
            else
            {
                rsm.Descrizione = string.Format("Stesso Stato Smistamento {0}",
                           rdl.UltimoStatoSmistamento.SSmistamento ?? string.Empty);

            }

            rsm.Save();
            xpObjSpaceRSD.CommitChanges();
            // prendere oid del precedente e aggiornare il tempo
            if (RSD_ultimaOid > 0 && RSD_idmin > 0)
            {
                RegistroSmistamentoDett ultimoRSD = xpObjSpaceRSD.GetObjectByKey<RegistroSmistamentoDett>(RSD_ultimaOid);
                rsm.DeltaTempoStato = RSD_idmin;
                rsm.Save();
                xpObjSpaceRSD.CommitChanges();
            }

            return rsm;
        }




		
        public void CreateRegistroOperativoDettaglio(RdL rdl, DateTime ultimadata, int idmin, int oidRegSmistamento)
        {
            IObjectSpace xpObjSpaceROD = Application.CreateObjectSpace();

            RegistroRdL rrdl = xpObjSpaceROD.GetObject<RegistroRdL>(rdl.RegistroRdL);

            RegistroOperativoDettaglio rop = xpObjSpaceROD.CreateObject<RegistroOperativoDettaglio>();
            rop.RegistroRdL = rrdl;
            rop.StatoOperativo = xpObjSpaceROD.GetObject<StatoOperativo>(rdl.UltimoStatoOperativo);
            rop.Utente = SecuritySystem.CurrentUserName;
            rop.DataOra = DateTime.Now;
            rop.Descrizione = string.Format("Cambio Stato Operativo da {0} a {1}",
                this.OperativoObjectsCache[0] != null ? this.OperativoObjectsCache[0].CodStato : string.Empty,
                 this.OperativoObjectsCache[1] != null ? this.OperativoObjectsCache[1].CodStato : string.Empty);
            //if (rrdl.RegistroOperativoDettaglios.Count > 0)
            //{
            //if (idmin != 0)
            //    rop.DeltaTempoStato = idmin;
            //}

            if (oidRegSmistamento != 0)
                rop.RegistroSmistamentoDett = xpObjSpaceROD.GetObjectByKey<RegistroSmistamentoDett>(oidRegSmistamento);

            rop.Save();
            xpObjSpaceROD.CommitChanges();

        }
	
	=====================================================