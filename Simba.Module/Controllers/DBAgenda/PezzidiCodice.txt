


            //IObjectSpace xpObjectSpace = View.ObjectSpace;  // Application.CreateObjectSpace();
            //NotificaRdL NoteficheRdL = (NotificaRdL)View.CurrentObject; // recupero il record selezionato
            //System.Text.StringBuilder nrldMessaggio = new System.Text.StringBuilder("", 32000000);
            //if (NoteficheRdL is NotificaRdL)
            //{
            //    NotificaRdL nrdl = xpObjectSpace.GetObjectByKey<NotificaRdL>(NoteficheRdL.Oid);
            //    RdL rdl = nrdl.RdL; //space.GetObject<RdL>(nrdl.RdL)

            //    int idsa = 0;
            //    //idsa = rdl.StatoAutorizzativo.Oid + 1;
            //    //idsa = (rdl.StatoAutorizzativo.Oid + 1) > space.GetObjects<StatoAutorizzativo>().Max(a => a.Oid) ? idsa = 1 : (rdl.StatoAutorizzativo.Oid + 1);
            //    //StatoAutorizzativo sa = space.GetObjectByKey<StatoAutorizzativo>(idsa);
            //    StatoAutorizzativo sa = null;
            //    DateTime DataArrivoDichiarata = DateTime.MinValue;
            //    switch (rdl.StatoAutorizzativo.Oid)
            //    {
            //        case 2:                        
            //                sa = xpObjectSpace.GetObjectByKey<StatoAutorizzativo>(3);//in Attesa di Trasferimento                        
            //            //   idsa = (rdl.StatoAutorizzativo.Oid + 1) > xpObjectSpace.GetObjects<StatoAutorizzativo>().Max(a => a.Oid) ? idsa = 1 : (rdl.StatoAutorizzativo.Oid + 1);                            
            //            break;
            //        case 3:                        
            //                sa = xpObjectSpace.GetObjectByKey<StatoAutorizzativo>(4); //Intervento in Lavorazione
            //            //idsa = (rdl.StatoAutorizzativo.Oid + 1) > xpObjectSpace.GetObjects<StatoAutorizzativo>().Max(a => a.Oid) ? idsa = 1 : (rdl.StatoAutorizzativo.Oid + 1);
            //            //sa = xpObjectSpace.GetObjectByKey<StatoAutorizzativo>(idsa);
            //            break;

            //        default:// altro non pervenuto
            //            idsa = (rdl.StatoAutorizzativo.Oid + 1) > xpObjectSpace.GetObjects<StatoAutorizzativo>().Max(a => a.Oid) ? idsa = 1 : (rdl.StatoAutorizzativo.Oid + 1);
            //            sa = xpObjectSpace.GetObjectByKey<StatoAutorizzativo>(idsa);
            //            break;
            //    }


            //    string location = "";
            //    using (Util u = new Util())
            //    {
            //        nrdl = u.SetNotificaRdL_Accetta_da_SO(nrdl, ref rdl, location, 10, sa, ref nrldMessaggio);
            //    }
            //    nrdl.Save();
            //    rdl.Save();// salvo i cambiamenti in memoria (in memoria dell'applicazione)
            //    xpObjectSpace.CommitChanges();// salvo i cambiamenti nel datatabase oraCLE
            //    #region  ---------------  Trasmetto messaggio se necessario    -----------------------------

            //    if (true)//PropertyObjectsCache.Count > 0)
            //    {
            //        if ((View.Id.Contains("RdL_DetailView_Gestione") || View.Id.Contains("RdL_DetailView_NuovoTT"))
            //        && View.ObjectTypeInfo.Type == typeof(RdL))
            //        {
            //            try
            //            {
            //                //var xpObjectSpace = Application.CreateObjectSpace();
            //                RdL RdL = rdl;// xpObjectSpace.GetObjectByKey<RdL>(Oid);
            //                string Messaggio = string.Empty;
            //                using (CAMSInvioMailCN.SetMail im = new CAMSInvioMailCN.SetMail())
            //                {
            //                    im.InviaMessaggiRdL(SetVarSessione.OracleConnString, Application.Security.UserName, RdL.RegistroRdL.Oid, ref  Messaggio);
            //                }
            //                System.Text.StringBuilder sbMessaggio = new System.Text.StringBuilder("", 32000000);
            //                sbMessaggio.AppendLine(string.Format("Trasmissione Avviso Eseguita!!"));
            //                sbMessaggio.AppendLine(string.Format("Messaggio Trasmesso:", Messaggio));
            //                SetMessaggioWeb(sbMessaggio);
            //            }
            //            catch (Exception ex)
            //            {
            //                System.Text.StringBuilder Messaggio = new System.Text.StringBuilder("", 32000000);
            //                Messaggio.AppendLine(string.Format("Trasmissione Avviso non Eseguita!!"));
            //                Messaggio.AppendLine(string.Format("Descrizione Errore:", ex.Message));
            //                SetMessaggioWeb(Messaggio);

            //                //throw new Exception(string.Format("Errore: Spedizione Mail non eseguita: " + ex.Message));
            //            }
            //        }
            //        //PropertyObjectsCache.Clear();
            //    }
            //    #endregion
            //    //var view = Application.CreateDetailView(xpojs, "RdL_DetailView_Gestione", true, objRdL);
            //    //view.Caption = string.Format("Richiesta di Lavoro");
            //    //view.ViewEditMode = ViewEditMode.Edit;
            //    //Application.MainWindow.SetView(view);
            //}








                //var result = xpObjectSpace.GetObjects<RdL>()
                //.Join(xpObjectSpace.GetObjects<NotificaRdL>(),
                //r => r.Oid,
                //nr => nr.RdL.Oid,
                //(r, nr) => new { r, nr })
                //.Where(z => z.r.UltimoStatoSmistamento.Oid==1 && z.nr.) //  .Where(z => z.sc.X + z.sc.Y == 10)
                //.Select(z => new { SomeClass = z.r}); //   .Select(z => new { SomeClass = z.r, SomeOtherClass = z.soc });
                //   var result1 = from sc in xpObjectSpace.GetObjects<RdL>()
                //join soc in xpObjectSpace.GetObjects<NotificaRdL>()
                //on sc.Oid equals  soc.RdL.Oid
                //select new { SomeClass = sc, SomeOtherClass = soc };





   obj.StartDate = DateTime.Now - TimeSpan.FromDays(1);//obj.StartOn = DateTime.Now - TimeSpan.FromDays(1);
                                obj.DueDate = obj.StartDate.AddMinutes(addTempo);// data scadenza   //--obj.EndOn = obj.StartDate.AddMinutes(2); 
                                obj.RemindIn = TimeSpan.Zero;//TimeSpan.FromMinutes(addTempo);
                                obj.RdL = rdl;
                                obj.Status = 1; //DevExpress.Persistent.Base.General.TaskStatus.NotStarted;
                                //obj.AlarmTime = DateTime.Now.Add(TimeSpan.FromMinutes(addTempo));
                                //obj.AlarmTime = obj.StartDate - obj.RemindIn.Value;   AlarmTime    obj.StartDate - obj.RemindIn.Value;
                                //obj.ResourceId
                                ((DevExpress.Persistent.Base.General.ISupportNotifications)obj)
                                                          .AlarmTime = DateTime.Now.AddMinutes(addTempo);

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DevExpress.Data.Filtering;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Layout;
using DevExpress.ExpressApp.Model.NodeGenerators;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.Templates;
using DevExpress.ExpressApp.Utils;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.Validation;
using DevExpress.ExpressApp.Notifications;
using CAMS.Module.DBTask;

namespace CAMS.Module.Web.Controllers.DBAgenda
{
    // For more typical usage scenarios, be sure to check out https://documentation.devexpress.com/eXpressAppFramework/clsDevExpressExpressAppViewControllertopic.aspx.
    public partial class NotificationsListViewControllerWeb : ViewController
    {

        private ListViewProcessCurrentObjectController targetController;
        //ASPxGridView gridView;
        //Contact act;
        public int OidRdL { get; set; }

        public NotificationsListViewControllerWeb()
        {
            InitializeComponent();
            // Target required Views (via the TargetXXX properties) and create their Actions.
            TargetObjectType = typeof(Notification);
            TargetViewType = ViewType.ListView;
        }
        protected override void OnActivated()
        {
            base.OnActivated();
            // Perform various tasks depending on the target View.
            //targetController = Frame.GetController<ListViewProcessCurrentObjectController>();
            //targetController.CustomProcessSelectedItem += TargetController_CustomProcessSelectedItem;
        }
        protected override void OnViewControlsCreated()
        {
            base.OnViewControlsCreated();
            // Access and customize the target View control.
        }
        protected override void OnDeactivated()
        {
            //IObjectSpace os = Application.CreateObjectSpace();
            //RdL GetRdL = os.GetObjectByKey<RdL>(OidRdL); 
            //var view = Application.CreateDetailView(os, "RdL_DetailView_Gestione", true, GetRdL);
            ////e.Handled = true;
            //view.Caption = string.Format("Richiesta di Lavoro");
            //view.ViewEditMode = ViewEditMode.Edit;
            //Application.MainWindow.SetView(view);
            base.OnDeactivated();
        }

        private void TargetController_CustomProcessSelectedItem(object sender, CustomProcessListViewSelectedItemEventArgs e)
        {
            //Notification notificationObject = e.InnerArgs.CurrentObject as Notification;
            //IObjectSpace os = Application.CreateObjectSpace();
            //RdL GetRdL = ((CAMS.Module.DBAgenda.NotificaRdL)(notificationObject.NotificationSource)).RdL;//	{impianto(27786)}	CAMS.Module.DBTask.RdL
            //OidRdL = GetRdL.Oid;
            
            //var view = Application.CreateDetailView(os, "RdL_DetailView_Gestione", true, os.GetObject<RdL>(GetRdL));
            //View.Close();
            //e.Handled = true;
            ////view.Caption = string.Format("Richiesta di Lavoro");
            ////view.ViewEditMode = ViewEditMode.Edit;
            ////Application.MainWindow.SetView(view);
 
            //Window window = Frame as Window;
            //if (window != null)
            //{
            //    window.Close(true);
            //}
            //os.CommitChanges();

            //Contact notifiedDemandActivity = os.GetObjectByKey<Contact>((notificationObject.NotificationSource as Contact).Oid);
            //DevExpress.ExpressApp.View detailView = Application.CreateDetailView(os, notifiedDemandActivity);
            //ShowViewParameters showViewParameters = new ShowViewParameters(detailView);
            //showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
            //ShowViewSource viewSource = new ShowViewSource(WebWindow.CurrentRequestWindow, null);
            //Application.ShowViewStrategy.ShowView(showViewParameters, viewSource);

            //NotificationsModule notificationsModule = this.Application.Modules.FindModule<NotificationsModule>();
            //IList<INotificationItem> iNotificationItemList = new List<INotificationItem>();
            //foreach (INotificationsProvider iNotificationsProvider in notificationsModule.NotificationsService.NotificationsProviders)
            //{
            //    foreach (INotificationItem iNotificationItem in iNotificationsProvider.GetNotificationItems())
            //    {
            //        if (iNotificationItem.NotificationSource == notificationObject.NotificationSource)
            //        {
            //            iNotificationItemList.Add(iNotificationItem);
            //        }
            //    }
            //    notificationsModule.NotificationsService.Dismiss(iNotificationItemList);
            //}
            //notificationsModule.NotificationsService.SetItemChanged(notificationObject.Source);
            //notificationsModule.NotificationsService.RefreshNotifications();
            //notificationsModule.NotificationsService.Refresh();
        }

    }
}

















##########################################################################


using CAMS.Module.Classi;
using CAMS.Module.DBAgenda;
using CAMS.Module.DBTask;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Notifications;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.Base.General;
using System;

namespace CAMS.Module.Web.Controllers.DBAgenda
{


    public partial class NotificationsObjectControllerWeb : ObjectViewController<DetailView, NotificationsObject>
    {
        private NotificationsService service;
        private SimpleAction VisualizzaRdLAction;
        int oidrdl = 0;
        int RdLDaAprire = 0;

        public NotificationsObjectControllerWeb()
        {
            ////InitializeComponent();
            //// Target required Views (via the TargetXXX properties) and create their Actions.
            //VisualizzaRdLAction = new SimpleAction(this, "Visualizza RdL", PredefinedCategory.Edit);
            //VisualizzaRdLAction.SelectionDependencyType = SelectionDependencyType.RequireSingleObject;
            //VisualizzaRdLAction.ImageName = "State_Task_Completed";
            //VisualizzaRdLAction.ToolTip = "Visualizza RdL";
            //VisualizzaRdLAction.Caption = "Visualizza RdL";
            //VisualizzaRdLAction.Execute += VisualizzaRdLAction_Execute;
        }
        protected override void OnActivated()
        {
            base.OnActivated();

            //service = Application.Modules.FindModule<NotificationsModule>().NotificationsService;
            //NotificationsDialogViewController notificationsDialogViewController = Frame.GetController<NotificationsDialogViewController>();
            //var MM = service.NotificationsProviders;

            //if (service != null && notificationsDialogViewController != null)
            //{
            //    notificationsDialogViewController.Dismiss.Executing += Dismiss_Executing;
            //    notificationsDialogViewController.Dismiss.Executed += Dismiss_Executed;

            //    notificationsDialogViewController.Actions.Add(VisualizzaRdLAction);
            //    //VisualizzaRdLAction.Executing += VisualizzaRdLAction_Executing;
            //    //VisualizzaRdLAction.Executed += VisualizzaRdLAction_Executed;
            //}
        }
        protected override void OnViewControlsCreated()
        {
            base.OnViewControlsCreated();
            // Access and customize the target View control.
        }
        protected override void OnDeactivated()
        {
            #region  codice escluso
            //NotificationsDialogViewController notificationsDialogViewController = Frame.GetController<NotificationsDialogViewController>();
            //if (notificationsDialogViewController != null)
            //{
            //    notificationsDialogViewController.Dismiss.Executing -= Dismiss_Executing;
            //    notificationsDialogViewController.Dismiss.Executed -= Dismiss_Executed;

            //    if (oidrdl > 0)
            //    {
            //        IObjectSpace xpObjectSpace = Application.CreateObjectSpace();

            //        NotificaRdL GetNotificaRdL = xpObjectSpace.GetObject<NotificaRdL>((NotificaRdL)View.CurrentObject);
            //        RdL GetRdL = xpObjectSpace.GetObjectByKey<RdL>(oidrdl);  //GetNotificaRdL.RdL.Oid

            //        var view = Application.CreateDetailView(xpObjectSpace, "RdL_DetailView_Gestione", true, GetRdL);

            //        view.Caption = string.Format("Richiesta di Lavoro");
            //        view.ViewEditMode = ViewEditMode.Edit;
            //        Application.MainWindow.SetView(view);
            //    }
            //}
            #endregion
            base.OnDeactivated();
        }
        // delegati di accettazione
        private void Dismiss_Executing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            service.ItemsProcessed += Service_ItemsProcessed;
        }
        private void Dismiss_Executed(object sender, DevExpress.ExpressApp.Actions.ActionBaseEventArgs e)
        {
            service.ItemsProcessed -= Service_ItemsProcessed;
        }

        // accettazione
        private void Service_ItemsProcessed(object sender, NotificationItemsEventArgs e)
        {
            IObjectSpace space = Application.CreateObjectSpace(typeof(NotificaRdL));
            foreach (INotificationItem item in e.NotificationItems)
            {
                if (item.NotificationSource is NotificaRdL)
                {
                    //var  unico = space.GetObjectHandle(item.NotificationSource);
                    //NotificaRdL nfrdl = (NotificaRdL)space.GetObjectByHandle(item.NotificationSource);
                    //space.GetObject(item.NotificationSource);
                    //var  unico = space.GetObjectHandle(item.NotificationSource);
                    //NotificaRdL nfrdl = (NotificaRdL)space.GetObjectByHandle(item.NotificationSource);

                    NotificaRdL nfrdl = space.GetObjectByKey<NotificaRdL>(item.NotificationSource.UniqueId);
                    nfrdl.RemindIn = null;
                    nfrdl.DateCompleted = DateTime.Now;
                    nfrdl.Status = 1;// TaskStatus.Completed;
                    nfrdl.Save();

                    //string xvv = "vvvfff";
                    IObjectSpace xpojs = Application.CreateObjectSpace();  ///  creo la objectspace (cioè la connessione al DB)
                    RdL objRdL = xpojs.GetObject<RdL>(nfrdl.RdL); // recupero la rdl associata alla notifica
                    objRdL.StatoAutorizzativo = xpojs.GetObjectByKey<StatoAutorizzativo>(4);// assegno lo stato autorizzativo = Approvata da SO 
                    objRdL.Save();// salvo i cambiamenti in memoria (in memoria dell'applicazione)
                    xpojs.CommitChanges();// salvo i cambiamenti nel datatabase oraCLE

                    #region  ---------------  Trasmetto messaggio se necessario    -----------------------------

                    if (true)//PropertyObjectsCache.Count > 0)
                    {
                        if ((View.Id.Contains("RdL_DetailView_Gestione") || View.Id.Contains("RdL_DetailView_NuovoTT"))
                        && View.ObjectTypeInfo.Type == typeof(RdL))
                        {
                            try
                            {
                                //var xpObjectSpace = Application.CreateObjectSpace();
                                RdL RdL = objRdL;// xpObjectSpace.GetObjectByKey<RdL>(Oid);
                                string Messaggio = string.Empty;
                                using (CAMSInvioMailCN.SetMail im = new CAMSInvioMailCN.SetMail())
                                {
                                    im.InviaMessaggiRdL(SetVarSessione.OracleConnString, Application.Security.UserName, RdL.RegistroRdL.Oid, ref  Messaggio);
                                }
                                System.Text.StringBuilder sbMessaggio = new System.Text.StringBuilder("", 32000000);
                                sbMessaggio.AppendLine(string.Format("Trasmissione Avviso Eseguita!!"));
                                sbMessaggio.AppendLine(string.Format("Messaggio Trasmesso:", Messaggio));
                                SetMessaggioWeb(sbMessaggio);
                            }
                            catch (Exception ex)
                            {
                                System.Text.StringBuilder Messaggio = new System.Text.StringBuilder("", 32000000);
                                Messaggio.AppendLine(string.Format("Trasmissione Avviso non Eseguita!!"));
                                Messaggio.AppendLine(string.Format("Descrizione Errore:", ex.Message));
                                SetMessaggioWeb(Messaggio);

                                //throw new Exception(string.Format("Errore: Spedizione Mail non eseguita: " + ex.Message));
                            }
                        }
                        //PropertyObjectsCache.Clear();
                    }
                    #endregion

                    var view = Application.CreateDetailView(xpojs, "RdL_DetailView_Gestione", true, objRdL);

                    view.Caption = string.Format("Richiesta di Lavoro");
                    view.ViewEditMode = ViewEditMode.Edit;
                    Application.MainWindow.SetView(view);

                }
            }
            space.CommitChanges();
        }



        private void Service_VediRdL_ItemsProcessed(object sender, NotificationItemsEventArgs e)
        {
            IObjectSpace space = Application.CreateObjectSpace(typeof(NotificaRdL));
            foreach (INotificationItem item in e.NotificationItems)
            {
                if (item.NotificationSource is NotificaRdL)
                {
                    NotificaRdL GetNotificaRdL = space.GetObjectByKey<NotificaRdL>(item.NotificationSource.UniqueId);
                    IObjectSpace xpObjectSpace = Application.CreateObjectSpace();
                    RdL GetRdL = xpObjectSpace.GetObjectByKey<RdL>(GetNotificaRdL.RdL.Oid);

                    var view = Application.CreateDetailView(xpObjectSpace, "RdL_DetailView_Gestione", true, GetRdL);

                    view.Caption = string.Format("Richiesta di Lavoro");
                    view.ViewEditMode = ViewEditMode.Edit;
                    Application.MainWindow.SetView(view);
                }

            }
        }


        private void SetMessaggioWeb(System.Text.StringBuilder Messaggio)
        {
            MessageOptions options = new MessageOptions() { Duration = 3000, Message = Messaggio.ToString() };
            options.Web.Position = InformationPosition.Top;
            options.Type = InformationType.Success;
            options.Win.Caption = "Messaggio";             //options.CancelDelegate = CancelDelegate;              //options.OkDelegate = OkDelegate;
            Application.ShowViewStrategy.ShowMessage(options);
        }


    }

}


//private void VisualizzaRdLAction_Executing(object sender, System.ComponentModel.CancelEventArgs e)
//{
//    service.ItemsProcessed += Service_VediRdL_ItemsProcessed;
//}

//private void VisualizzaRdLAction_Executed(object sender, DevExpress.ExpressApp.Actions.ActionBaseEventArgs e)
//{
//    service.ItemsProcessed -= Service_VediRdL_ItemsProcessed;
//}


//private void VisualizzaRdLAction_Execute(object sender, SimpleActionExecuteEventArgs e)
//{

//    Window window = Frame as Window;
//    if (window != null)
//    {
//        window.Close(true);
//    }
//    oidrdl = 26044;
//    //IObjectSpace xpObjectSpace =  Application.CreateObjectSpace() ;

//    //NotificaRdL GetNotificaRdL = xpObjectSpace.GetObject<NotificaRdL>((NotificaRdL)View.CurrentObject);
//    //RdL GetRdL = xpObjectSpace.GetObjectByKey<RdL>(GetNotificaRdL.RdL.Oid);

//    //var view = Application.CreateDetailView(xpObjectSpace, "RdL_DetailView_Gestione", true, GetRdL);

//    //view.Caption = string.Format("Richiesta di Lavoro");
//    //view.ViewEditMode = ViewEditMode.Edit;
//    //Application.MainWindow.SetView(view);

//}
    


//namespace CAMS.Module.Controllers.DBAgenda
//{
//    // For more typical usage scenarios, be sure to check out https://documentation.devexpress.com/eXpressAppFramework/clsDevExpressExpressAppViewControllertopic.aspx.
//    public partial class NotificationsObjectController : ObjectViewController<DetailView, NotificationsObject>
//    {
//        private NotificationsService service;

//        public NotificationsObjectController()
//        {
//            // InitializeComponent();

//        }

//        protected override void OnActivated()
//        {
//            base.OnActivated();
//            //service = Application.Modules.FindModule<NotificationsModule>().NotificationsService;
//            //NotificationsDialogViewController notificationsDialogViewController = Frame.GetController<NotificationsDialogViewController>();
//            //if (service != null && notificationsDialogViewController != null)
//            //{
//            //    notificationsDialogViewController.Dismiss.Executing += Dismiss_Executing;
//            //    notificationsDialogViewController.Dismiss.Executed += Dismiss_Executed;
//            //}

//        }

//        private void Dismiss_Executed(object sender, DevExpress.ExpressApp.Actions.ActionBaseEventArgs e)
//        {
//            service.ItemsProcessed -= Service_ItemsProcessed;
//        }

//        //private void Dismiss_Executed(object sender, DevExpress.ExpressApp.Actions.ActionBaseEventArgs e)
//        //{
//        //    var oggetti_selezionati = View.SelectedObjects;

//        //    int vvv = oggetti_selezionati.Count;

//        //    //var lstRisorseSelezionate = ((List<RisorseDistanzeRdL>)((((DevExpress.ExpressApp.Frame)
//        //    //    (e.PopupWindow)).View).SelectedObjects.Cast<RisorseDistanzeRdL>().ToList<RisorseDistanzeRdL>()));
//        //    Debug.WriteLine(View.SelectedObjects.Count);

//        //    List<NotificaRdL> List = View.SelectedObjects.Cast<NotificaRdL>().ToList<NotificaRdL>();

//        //    var NotificaSelezionata = (NotificaRdL)List[0];
//        //    NotificaSelezionata.dateCompleted = DateTime.Now;
//        //    NotificaSelezionata.RemindIn = null;
//        //    NotificaSelezionata.Status = DevExpress.Persistent.Base.General.TaskStatus.Completed;
//        //    NotificaSelezionata.Save();
//        //    View.ObjectSpace.CommitChanges();

//        //    IObjectSpace xpojs = Application.CreateObjectSpace();  ///  creo la objectspace (cioè la connessione al DB)
//        //    RdL objRdL = xpojs.GetObject<RdL>(NotificaSelezionata.RdL); // recupero la rdl associata alla notifica

//        //    objRdL.StatoAutorizzativo = xpojs.GetObjectByKey<StatoAutorizzativo>(4);// assegno lo stato autorizzativo = Approvata da SO 

//        //    objRdL.Save();// salvo i cambiamenti in memoria (in memoria dell'applicazione)
//        //    xpojs.CommitChanges();// salvo i cambiamenti nel datatabase oraCLE
//        //}

//        //protected override void OnViewControlsCreated()
//        //{
//        //    base.OnViewControlsCreated();
//        //    // Access and customize the target View control.
//        //}
//        protected override void OnDeactivated()
//        {
//            NotificationsDialogViewController notificationsDialogViewController =Frame.GetController<NotificationsDialogViewController>();
//            if (notificationsDialogViewController != null)
//            {
//                notificationsDialogViewController.Dismiss.Executing -= Dismiss_Executing;
//                notificationsDialogViewController.Dismiss.Executed -= Dismiss_Executed;
//            }
//            base.OnDeactivated();
//        }

//        private void Dismiss_Executing(object sender, System.ComponentModel.CancelEventArgs e)
//        {
//            service.ItemsProcessed += Service_ItemsProcessed;
//        }

//        private void Service_ItemsProcessed(object sender, DevExpress.Persistent.Base.General.NotificationItemsEventArgs e)
//        {
//            IObjectSpace space = Application.CreateObjectSpace(typeof(NotificaRdL));
//            foreach (INotificationItem item in e.NotificationItems)
//            {
//                if (item.NotificationSource is NotificaRdL)
//                {
//                     //var  unico = space.GetObjectHandle(item.NotificationSource);
//                    //NotificaRdL nfrdl = (NotificaRdL)space.GetObjectByHandle(item.NotificationSource);
//                    //space.GetObject(item.NotificationSource);
//                    //var  unico = space.GetObjectHandle(item.NotificationSource);
//                    //NotificaRdL nfrdl = (NotificaRdL)space.GetObjectByHandle(item.NotificationSource);

//                    NotificaRdL nfrdl = space.GetObjectByKey<NotificaRdL>(item.NotificationSource.UniqueId);
//                    nfrdl.RemindIn = null;
//                    nfrdl.dateCompleted = DateTime.Now;
//                    nfrdl.Status = DevExpress.Persistent.Base.General.TaskStatus.Completed;
//                    nfrdl.Save();
//                    string xvv = "vvvfff";
//                    IObjectSpace xpojs = Application.CreateObjectSpace();  ///  creo la objectspace (cioè la connessione al DB)
//                    RdL objRdL = xpojs.GetObject<RdL>(nfrdl.RdL); // recupero la rdl associata alla notifica


//                    objRdL.StatoAutorizzativo = xpojs.GetObjectByKey<StatoAutorizzativo>(4);// assegno lo stato autorizzativo = Approvata da SO 
//                    objRdL.Save();// salvo i cambiamenti in memoria (in memoria dell'applicazione)
//                    xpojs.CommitChanges();// salvo i cambiamenti nel datatabase oraCLE



//                    #region  ---------------  Trasmetto messaggio se necessario    -----------------------------

//                    //if (true)//PropertyObjectsCache.Count > 0)
//                    //{
//                    //    if ((View.Id.Contains("RdL_DetailView_Gestione") || View.Id.Contains("RdL_DetailView_NuovoTT"))
//                    //    && View.ObjectTypeInfo.Type == typeof(RdL))
//                    //    {
//                    //        try
//                    //        {
//                    //            //var xpObjectSpace = Application.CreateObjectSpace();
//                    //            RdL RdL = rdl;// xpObjectSpace.GetObjectByKey<RdL>(Oid);
//                    //            string Messaggio = string.Empty;
//                    //            using (CAMSInvioMailCN.SetMail im = new CAMSInvioMailCN.SetMail())
//                    //            {
//                    //                im.InviaMessaggiRdL(SetVarSessione.OracleConnString, Application.Security.UserName, RdL.RegistroRdL.Oid, ref  Messaggio);
//                    //            }
//                    //            System.Text.StringBuilder sbMessaggio = new System.Text.StringBuilder("", 32000000);
//                    //            sbMessaggio.AppendLine(string.Format("Trasmissione Avviso Eseguita!!"));
//                    //            sbMessaggio.AppendLine(string.Format("Messaggio Trasmesso:", Messaggio));
//                    //            SetMessaggioWeb(sbMessaggio);
//                    //        }
//                    //        catch (Exception ex)
//                    //        {
//                    //            System.Text.StringBuilder Messaggio = new System.Text.StringBuilder("", 32000000);
//                    //            Messaggio.AppendLine(string.Format("Trasmissione Avviso non Eseguita!!"));
//                    //            Messaggio.AppendLine(string.Format("Descrizione Errore:", ex.Message));
//                    //            SetMessaggioWeb(Messaggio);

//                    //            //throw new Exception(string.Format("Errore: Spedizione Mail non eseguita: " + ex.Message));
//                    //        }
//                    //    }

//                    //    PropertyObjectsCache.Clear();
//                    //}
//                    #endregion




//                }
//            }
//            space.CommitChanges();
//        }



//    }
//}



//public class DeleteOnDismissController : ObjectViewController<DetailView, NotificationsObject>
//{
//    //private NotificationsService service;
//    protected override void OnActivated()
//    {
//        base.OnActivated();
//        //        service = Application.Modules.FindModule<NotificationsModule>().NotificationsService;
//        //        NotificationsDialogViewController notificationsDialogViewController =
//        //Frame.GetController<NotificationsDialogViewController>();
//        //        if (service != null && notificationsDialogViewController != null)
//        //        {
//        //            notificationsDialogViewController.Dismiss.Executing += Dismiss_Executing;
//        //            notificationsDialogViewController.Dismiss.Executed += Dismiss_Executed;
//        //        }
//    }
//    protected override void OnDeactivated()
//    {
////        NotificationsDialogViewController notificationsDialogViewController =
////Frame.GetController<NotificationsDialogViewController>();
////        if (notificationsDialogViewController != null)
////        {
////            notificationsDialogViewController.Dismiss.Executing -= Dismiss_Executing;
////            notificationsDialogViewController.Dismiss.Executed -= Dismiss_Executed;
////        }
//        base.OnDeactivated();
//    }
//    //private void Dismiss_Executing(object sender, System.ComponentModel.CancelEventArgs e)
//    //{
//    //    service.ItemsProcessed += Service_ItemsProcessed;
//    //}

//    //private void Service_ItemsProcessed(object sender,DevExpress.Persistent.Base.General.NotificationItemsEventArgs e)
//    //{
//    //    IObjectSpace space = Application.CreateObjectSpace(typeof(MyNotification));
//    //    foreach (INotificationItem item in e.NotificationItems)
//    //    {
//    //        if (item.NotificationSource is MyNotification)
//    //        {
//    //            space.Delete(space.GetObject(item.NotificationSource));
//    //        }
//    //    }
//    //    space.CommitChanges();
//    //}
//    //private void Dismiss_Executed(object sender,DevExpress.ExpressApp.Actions.ActionBaseEventArgs e)
//    //{
//    //    service.ItemsProcessed -= Service_ItemsProcessed;
//    //}
//}