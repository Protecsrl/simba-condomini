Sto analizzando il lavoro da voi svolto:.
1) le procedure che avete fatto sono "Procedures",  da convenzione noi facciamo solo Package e Bodies, le ho riscritti in questa forma e ve le mando in allegato, dovete implementarle nel codice di pla sql.( basta aprere il file programma in developper, e compilare. quindi salva l'allegato su disco. da menu file di developper seleziona apri-->programfile e seleziona il file salvato. il file viene caricato. compila. e hai direttamente su tuo database il pacage completo., 

2) nella storepocedura si fa riferimento alla tabella impegmo, mentre nel programma si crrea una tabella impegni ( o o i?): . poi si fa riferimento ad una colonna verifica che nella tabella non c'e'? ( io ho aggiunto a mano).

3) in SPRISORSEGHOST IL CDICE:
 IdProva := 1;
    for skilllist in (select distinct m.skill
                        from mpimpegno i
                       inner join hr.mansioni m
                          on m.oid = i.mansione) loop
      begin
MA   hr a cui si fariferimento alla tabella mansioni, cosa e'?   io ho tolto hr, e quindi mi si compila con mansioni senza hr.


4) AVETE IMPLEMENTATO LA CLASSE MPIMPEGNI: i nomi dei campi nell'atributo : [Persistent("anno"), è scritto con la lettera minuscola, per far girare le store procedure senza problemi di nomi di campo, devono essere tutto scritte maiuscole:    [Persistent("ANNO"), . i campi del DB sempre tutto in MAIUSCOLO!.

5) per chiamare le store procedure è ora semplicissiomo. SCARICATE IL CODICE ULTIMA RELISE DA SVN ON LINE. troverete che la connectionstring è automatica. alla classe DB, dove ho copiato anche la vostra storeprocedure di prova, ha già impostata la connessione.
dovete passare i parametri e le procedure funzionanano giaà. prendete in esempio quelle crete da noi (vedi la classe DB).


6) il "Planinigcontroller" è stato salvato sulla directory di Controls. deve stare dentro la directori che ho creato per il planner:
 - Controlls->DBPlanner, dove ci ho messo un file di testo utile.
 ATTENZIONE!!  Non spostate il controller. SVN crea un botto di problrmi quando si sposta un file. è meglio crearne uno nuovo uguale nella directory, e poi "escludi da progetto" quello vecchio.

7) Attributo Appearance   nella classe "RegPianificazioneMP"  NON VALIDO.
fate attenzione, non si puo' impostare un criterio di confronto tra una CLASSE ed un INTERO.
La Vostra riga di confronto era:
 [Appearance("AbilitaModificaScenario", Enabled = false, Criteria = "StatoPianificazioneMP > 2", Context = "DetailView")]
                                                                      #####################
quella giusta è:
[Appearance("AbilitaModificaScenario", Enabled = false, Criteria = "StatoPianificazioneMP.Oid > 2", Context = "DetailView")]
                                                                    #####################@@@@@####
ho modificato solo sullo scenario ed ho aggiunto anche una apparence di colore rosso quando è bloccato (vedi se puoi migliorare)

-----------------   pezzo di codice
 #region Scenario relazione FIGLIO
        Scenario fScenario;
        [Persistent("SCENARIO"), DisplayName("Scenario")] //, typeof(Scenario)
        [Appearance("AbilitaModificaScenario", Enabled = false, Criteria = "StatoPianificazioneMP.Oid > 2", Context = "DetailView")]
        [Appearance("AbilitaModificaScenario.BackColor.Red", BackColor = "Red", FontColor = "Black", Priority = 1, Criteria = "StatoPianificazioneMP.Oid > 2")]
        
        public Scenario Scenar
---------------------------------
 //IObjectSpace os = View is ListView ? Application.CreateObjectSpace() : View.ObjectSpace;
                       // ArrayList objMPPBLListSelects = new ArrayList(e.SelectedObjects);
                        //string NomeLv = "PMS_ListView";
                        //  string listViewId = Application.FindListViewId(typeof(SIRMP.Module.MPSK.VerificaMPP));
                        string DetailViewId = "RegPianificazioneMP_DetailView_Associa";
                        System.Diagnostics.Debug.WriteLine(curObj.ToString());
                      //  int sMppId = ((SIRMP.Module.MPSK.MPP)(objList)).MppId;
                        //string Edificio = ((SIRMP.Module.MPSK.MPP)(objList)).Edificio.ToString();
                        //string Servizio = ((SIRMP.Module.MPSK.MPP)(objList)).Servizio.ToString();
                        //string Anno = ((SIRMP.Module.MPSK.MPP)(objList)).Anno.ToString();
                        string CaptionListView = (curObj.Descrizione).ToString();
                        //string.Format(" ( Centrale: {0}, Servizio: {1}, Anno: {2} )", Edificio, Servizio, Anno);

                        //CollectionSource clPMSLv = (CollectionSource)Application.CreateCollectionSource(os, typeof(), listViewId);
                        //clPMSLv.Criteria["Filto_MPP"] = CriteriaOperator.Parse("MPP =  " + sMppId.ToString());
                        IObjectSpace os = Application.CreateObjectSpace();
                        RegPianificazioneMP obj = os.FindObject<RegPianificazioneMP>(new BinaryOperator("Oid", curObj.Oid.ToString()));
                        e.ShowViewParameters.CreatedView = Application.CreateDetailView(os,DetailViewId,false,obj);
                      //  e.ShowViewParameters.CreatedView.Caption = e.ShowViewParameters.CreatedView.Caption + CaptionListView;
                        e.ShowViewParameters.NewWindowTarget = NewWindowTarget.Separate;
                        e.ShowViewParameters.TargetWindow = TargetWindow.Default;
                        e.ShowViewParameters.Context = TemplateContext.PopupWindow;
                        e.ShowViewParameters.CreateAllControllers = true;
                        //You can pass custom Controllers for intercommunication or to provide a standard functionality).
                        DialogController dc = Application.CreateController<DialogController>();
                        e.ShowViewParameters.Controllers.Add(dc);



						
                           
                                //if (!String.IsNullOrEmpty(Util.GetDescrizioni(NumStato+1)))
                                //    curObj.SetMemberValue("DescrizioneAvanti", Util.GetDescrizioni(NumStato+1));

                                //if (!String.IsNullOrEmpty(Util.GetDescrizioni(NumStato )))
                                //    curObj.SetMemberValue("DescrizioneAzione",  Util.GetDescrizioni(NumStato));
                           

                                //if (!String.IsNullOrEmpty(Util.GetDescrizioni(NumStato-1)))
                                //    curObj.SetMemberValue("DescrizioneAnnulla", Util.GetDescrizioni(NumStato - 1));
                                //else
                                //    curObj.SetMemberValue("DescrizioneAnnulla", null);
                           


						     //RegPianificazioneMP crRegPianificazioneMP = ((RegPianificazioneMP)(View.CurrentObject));
                        //crRegPianificazioneMP.RPMPGhosts.Criteria = CriteriaOperator.Parse("RisorseTeames.Count == 0");
                        //Frame.GetController<DevExpress.ExpressApp.SystemModule.ObjectMethodActionsViewController>().Actions["RegPianificazioneMP.UpdateSimpleCustomField"].TargetViewId = "";
                        //ActionBase myAction;
                        //myAction = (ActionBase)Frame.GetController<DevExpress.ExpressApp.SystemModule.ObjectMethodActionsViewController>
                        //    ().Actions["RegPianificazioneMP.UpdateSimpleCustomField"];
                        //BoolList enabledList = myAction.Active;
                        //enabledList["Disattivato"] = false;

                        //Frame.GetController<DevExpress.ExpressApp.SystemModule.ObjectMethodActionsViewController>
                        //    ().Actions["RegPianificazioneMP.UpdateSimpleCustomField"].Active["Attiva.CambioAss"] = false;
                       // this.Actions["RegPianificazioneMP.UpdateSimpleCustomField"].Active.SetItemValue("Active", false);


					   
                        
                        //ActionBase myAction;
                        //myAction = (ActionBase) Frame.GetController<DevExpress.ExpressApp.SystemModule.ObjectMethodActionsViewController>
                        //    ().Actions["RegPianificazioneMP.UpdateSimpleCustomField"];
                        //BoolList enabledList = myAction.Active;
                        //enabledList["Attivato"] = true;
                       // enabledList.RemoveItem("Disattivato");
                        //Frame.GetController<DevExpress.ExpressApp.SystemModule.ObjectMethodActionsViewController>().Actions["RegPianificazioneMP.UpdateSimpleCustomField"].Active.SetItemValue("Active", true);
                         //   ().Actions["RegPianificazioneMP.UpdateSimpleCustomField"].Active["Attiva.CambioAss"] = true;
                          //().Actions["RegPianificazioneMP.UpdateSimpleCustomField"].Active.SetItemValue("", true);
                       // this.Actions["UpdateSimpleCustomField"].Active.SetItemValue("Active", true);






					   
            if (Step < 0)
            {  // indietro
                if (NumstatoAttuale != 0)
                    MPStatoSuccessivo = statoAttuale.Session.GetObjectByKey<MPStatoPianificazione>(  Step);// >(NumstatoAttuale+Step);//

            }
            else  // avanti
            {
                if (NumstatoAttuale != 72)
                    MPStatoSuccessivo = statoAttuale.Session.GetObjectByKey<MPStatoPianificazione>( Step);// e>(NumstatoAttuale+Step);//
            } 