        //public CAMS.Module.DBAgenda.NotificaRdL SetNotificaRdL_Tecnico(
        //    CAMS.Module.DBAgenda.NotificaRdL nrdl, ref  CAMS.Module.DBTask.RdL rdl, string location,
        //    int addTempo, CAMS.Module.DBTask.StatoAutorizzativo sa, DateTime DataDichiaratadiArrivo, ref StringBuilder sbMessaggio)
        //{
        //    if (nrdl != null)
        //    { /*//      imposta il nuovo tepo di allarme per il popap    
        //           //  statoAutorizzativo = 0 [quando si crea la RdL] 
        //            //  statoAutorizzativo = 1 [quando si crea la notifica] 
        //            //  statoAutorizzativo = 2 [quando dichiara il tecnico]         **@@
        //            //  statoAutorizzativo = 3 [quando Accetta la Sala Operativa]   
        //            //  statoAutorizzativo = 4 [quando in trasferimento il tecnico] **@@   
        //       * */
        //        try
        //        {
        //            //addTempo = SetaddTempo(sa.Oid, rdl);   //  ricava il deltatempo dalla sringa 0:30;1:20;2:30;3:40;

        //            nrdl.Label = SetLabelNotifica(rdl, nrdl, sa);// in attesa della dichiarazione del tecnico #############
        //            nrdl.LabelListView = (LabelListView)nrdl.Label;
        //            if (sa.Oid == 2)/// ha dichiarato il tempo di arrivo il trasferimento il tecnico
        //            {
        //                rdl.DataPrevistoArrivo = DataDichiaratadiArrivo;
        //                nrdl.MessaggioUtente = string.Format("Autorizzando!, La data di Arrivo dichiarata dal tecnico({0}) aggiornerà la data pianificata", rdl.DataPrevistoArrivo);
        //                //  imposto le date di avviso
        //                nrdl.StartDate = DateTime.Now.AddMinutes(2); // - TimeSpan.FromDays(1) data di inizio avviso di popup    -  obj.StartOn = DateTime.Now - TimeSpan.FromDays(1);
        //                nrdl.DueDate = nrdl.StartDate.AddMinutes(addTempo);// data scadenza   //--obj.EndOn = obj.StartDate.AddMinutes(2);  

        //                nrdl.MessaggioUtente = string.Format("il tecnico ha Dichiarato la seguente data di arrivo {0}, Accettare per confermare.", DataDichiaratadiArrivo);

        //            }
        //            if (sa.Oid == 4) /// ha inisato il trasferimento il tecnico
        //            {
        //                ((DevExpress.Persistent.Base.General.ISupportNotifications)nrdl)
        //                    .AlarmTime = null;
        //                nrdl.DateCompleted = DateTime.Now.AddMinutes(2);
        //                nrdl.MessaggioUtente = string.Format("il tecnico ha iniziato il trasferimento entro il tempo atteso", rdl.DataPrevistoArrivo);
        //                // non cambio nulla della RdL
        //                //   qui cambio solo lo stato autorizzativo non il resto su RdL
        //            }
        //            //   qui cambio su RdL
        //            rdl.StatoAutorizzativo = sa;// assegno lo stato autorizzativo = Approvata da SO 
        //        }
        //        catch (Exception e)
        //        {
        //            sbMessaggio.AppendLine("Errore");
        //            sbMessaggio.AppendLine("The process failed: {0}" + e.ToString());
        //            Console.WriteLine("The process failed: {0}", e.ToString());
        //        }
        //        sbMessaggio.AppendLine("Richiesta intervento Sezionata:");
        //        sbMessaggio.AppendLine("nr.:" + rdl.Oid.ToString());
        //    }

        //    return nrdl;
        //}



namespace CAMS.Module.Classi
{
    public partial class VarSessione {


       //public   string GetMioRuolo()
       // {
       //    string RuoloMio = "Administrator";
       //     if (Application  != null)
       //     {                
       //         SecuritySystemUser user2 = (SecuritySystemUser)Application.Security.User;
       //         System.Collections.Generic.List<DevExpress.ExpressApp.Security.Strategy.SecuritySystemRole> Role2 = user2.Roles.ToList();
       //         foreach (DevExpress.ExpressApp.Security.Strategy.SecuritySystemRole R in Role2)
       //         {
       //             if (R.Name.Contains("Administrator"))
       //                 return R.Name.ToString();

       //             if (R.Name.Contains("Visualiz"))
       //                 return R.Name.ToString();

       //             if (R.Name.Contains("STF") || R.Name.Contains("OPT"))
       //                 return R.Name.ToString();

       //         }
       //     }
       //     return RuoloMio;  
       // }  
    
    
    
    }
}



        //private string GetMioRuolo()
        //{
        //    // If a user named 'Sam' doesn't exist in the database, create this user
        //    //SecuritySystemUser user1 = ObjectSpace.FindObject<SecuritySystemUser>(new BinaryOperator("UserName", Application.Security.UserName));
        //    //System.Collections.Generic.List<DevExpress.ExpressApp.Security.Strategy.SecuritySystemRole>  MioRoleList = user1.Roles.ToList();
        //    //int count = MioRoleList.Count;
        //    //int i = 0;
        //    // for (i = 1; i <= count; i++) {            
        //    //        }
        //    string RuoloMio = "Administrator";
        //    SecuritySystemUser user2 = (SecuritySystemUser)Application.Security.User;
        //    System.Collections.Generic.List<DevExpress.ExpressApp.Security.Strategy.SecuritySystemRole> Role2 = user2.Roles.ToList();
        //    foreach (DevExpress.ExpressApp.Security.Strategy.SecuritySystemRole R in Role2)
        //    {
        //        if (R.Name.Contains("Administrator"))
        //            return R.Name.ToString();

        //        if (R.Name.Contains("Visualiz"))
        //            return R.Name.ToString();

        //        if (R.Name.Contains("STF") || R.Name.Contains("OPT"))
        //            return R.Name.ToString();

        //    }
        //    return RuoloMio;
        //    //if (user1 == null)
        //    //{
        //    //    //user1 = ObjectSpace.CreateObject<SecuritySystemUser>();
        //    //    //user1.UserName = "Sam";
        //    //    //// Set a password if the standard authentication type is used
        //    //    //user1.SetPassword("");
        //    //    SecuritySystemRole MioRole = ObjectSpace.FindObject<SecuritySystemRole>(new BinaryOperator("Users", "Sam"));
        //    //    return MioRole.Name.ToString();
        //    //}
        //    //else
        //    //{
        //    //    SecuritySystemRole MioRole = ObjectSpace.FindObject<SecuritySystemRole>(new BinaryOperator("Name", "Administrators"));
        //    // //   SecuritySystemRole MioRole = ObjectSpace.FindObject<SecuritySystemRole>(new BinaryOperator("Users", "Sam"));
        //    //    return MioRole.Name.ToString();
        //    //}
        //}
       #########################################################################################################################
	   variabili 
	     //private static string fOracleConnString;

        #region vartiabili di sessione che non cambiano in funzione dell'uttente connesso
        public static string OracleConnString;  
        public static string ConfigConnString;
        public static string PhysicalPathSito;
        #endregion
        //{
        //    get { return OracleConnString; }
        //    set { SetPropertyValue("OracleConnString", ref OracleConnString, value); }
        //}
        //private string fCorrenteRuolo;
        #region variabili di sessione che cambiano in funzione dell UTENTE CONNESSO
        public static string CorrenteUser { get; set; }
        public static string CorrenteRuolo{ get; set; }
        public static string CodSessioneWeb { get; set; }
        //public static string FiltroEdifici;
        #endregion


        //{
        //    get { return fCorrenteRuolo; }
        //    set { SetPropertyValue("CorrenteRuolo", ref fCorrenteRuolo, value); }
        //}
        //private string fCodSessioneWeb;
       
        //{
        //    get { return fCodSessioneWeb; }
        //    set { SetPropertyValue("CodSessioneWeb", ref fCodSessioneWeb, value); }
        //}
       


	       if (Evaluate("Descrizione") != null)
                {
                    sDescrizione = ((string)Evaluate("Descrizione")).ToString();
                }

                if (Evaluate("UltimoStatoSmistamento") != null)
                {
                    sSmistamento = ((StatoSmistamento)Evaluate("UltimoStatoSmistamento")).ToString();                    
                }
                if (Evaluate("Categoria") != null)
                {
                    sCategoria = ((Categoria)Evaluate("Categoria")).Descrizione;
                }
                if (this != null)
                {
                    sCodice = this.Oid.ToString();
                }               
                //if(!string.IsNullOrEmpty(sDescrizione) )
                //{
                //    fDettaglio = string.Format("Codice({0}),Descrizione:{1}, Categoria({2}), Richiedente({3})", sCodice, sDescrizione, sCategoria);
                    
                //}

                //if (sCategoria.Contains("PROGRAMMATA"))
                //{
                //    fDettaglio = string.Format("Codice({0}),Descrizione:{1}, Categoria({2}), Scenario/Cluster({2}/{3})", sCodice, sDescrizione, sCategoria, sScenario, sClusterEdifici);
                //}
                //else
                //{
                //    fDettaglio = string.Format("Codice({0}),Descrizione:{1}, Categoria({2}), Richiedente({3})", sCodice, tempDescrizione, sCategoria, sRichiedente); //, sTipoRichiedente

                //}





				da rdl

				  //var sCategoria = string.Empty;
                //var sRichiedente = string.Empty;
                ////var sTipoRichiedente = string.Empty;
                //var sClusterEdifici = string.Empty;
                //var sScenario = string.Empty;
                //var sCodice = string.Empty;

                //tempDescrizione = Evaluate("Descrizione");

                //if (Evaluate("Categoria") != null)
                //{
                //    sCategoria = ((Categoria)Evaluate("Categoria")).Descrizione;
                //}
                //if (this != null)
                //{
                //    sCodice = this.Oid.ToString();
                //}
                //if (Evaluate("Richiedente") != null)
                //{
                //    sRichiedente = ((Richiedente)Evaluate("Richiedente")).NomeCognome;
                //}
                //if (Evaluate("Scenario") != null)
                //{
                //    sScenario = ((Scenario)Evaluate("Scenario")).Descrizione;
                //}
                //if (Evaluate("ClusterEdifici") != null)
                //{

                //    sClusterEdifici = ((ClusterEdifici)Evaluate("ClusterEdifici")).Descrizione;
                //}
                //if (sCategoria.Contains("PROGRAMMATA"))
                //{
                //    fDettaglio = string.Format("Codice({0}),Descrizione:{1}, Categoria({2}), Scenario/Cluster({2}/{3})", sCodice, tempDescrizione, sCategoria, sScenario, sClusterEdifici);
                //}
                //else
                //{
                //    fDettaglio = string.Format("Codice({0}),Descrizione:{1}, Categoria({2}), Richiedente({3})", sCodice, tempDescrizione, sCategoria, sRichiedente); //, sTipoRichiedente

                //}





				  //// Edificio ed = Session.GetObjectByKey<Edificio>(this.Edificio);
                        //try
                        //{
                        //    SetVarSessione.OidEdificioCalcoloDistanze = this.Edificio.Oid;
                        //    SetVarSessione.OidEdificioCalcoloDistanzeLatitudine = double.Parse(this.Edificio.Indirizzo.GeoLat.ToString());
                        //    SetVarSessione.OidEdificioCalcoloDistanzeLongitudine = double.Parse(this.Edificio.Indirizzo.GeoLng.ToString());
                        //}
                        //catch
                        //{
                        //    SetVarSessione.OidEdificioCalcoloDistanze = this.Edificio.Oid;
                        //    SetVarSessione.OidEdificioCalcoloDistanzeLatitudine = 0;
                        //    SetVarSessione.OidEdificioCalcoloDistanzeLongitudine = 0;
                        //}
                        //string sRdL = string.Empty;
                        //sRdL = this.Oid.ToString();
                        //string dvRisorse = string.Empty;
                        //using (CAMS.Module.Classi.DB db = new CAMS.Module.Classi.DB()) //pk_mpasscaricocapacita.GetRisorsexTask"
                        //{
                        //    dvRisorse = db.GetRisorsexTask(sRdL, CAMS.Module.Classi.SetVarSessione.CorrenteUser);
                        //}
                        //var ParCriteria = string.Format("Oid In ({0})", dvRisorse);