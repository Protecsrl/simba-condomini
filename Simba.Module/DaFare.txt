Se la dimensione dell'archivio supera ancora i 30 MB, puoi caricare i tuoi file sul nostro server FTP. Utilizzare le seguenti credenziali per accedervi: 

Host: ftp://downloads.devexpress.com 
Utente: UPLOAD  
Password: HEREYOUARE 
Solo il nostro team di supporto può scaricare file da questo server FTP.
        #region immaggine


        private FileData fFileImage;
        [NonPersistent]
        [DisplayName("File Image")]
        [Appearance("planimetrie.fFileImage", Criteria = "not(IsVisibleFileEdit)", Visibility = ViewItemVisibility.Hide)]
        [Aggregated, ExpandObjectMembers(ExpandObjectMembers.Never)]
        [FileTypeFilter("DocumentFiles", 1, "*.pdf", "*.PDF")]
        //[FileTypeFilter("AllFiles", 2, "*.*")]
        public FileData FileImage
        {
            get { return fFileImage; }
            set { SetPropertyValue("FileImage", ref fFileImage, value); }
        }

        private string fFileImageFullName;
        [Persistent("FILEIMAGENAMEPATH"), Size(150), DevExpress.Xpo.DisplayName("Nome File Image")]
        [DbType("varchar(150)")]
        [VisibleInListView(false)]
        public string FileImageFullName
        {
            get { return fFileImageFullName; }
            set { SetPropertyValue<string>("FileImageFullName", ref fFileImageFullName, value); }
        }

        [PersistentAlias("FileImageFullName")]
        [DevExpress.Xpo.DisplayName("Nome file Image")]
        public string ImageFNameFile
        {
            get
            {
                object tempObject = EvaluateAlias("ImageFNameFile");
                if (tempObject != null)
                {
                    string fullpath = (string)tempObject.ToString(); 
                    return Path.GetFileName(fullpath);
                }
                else { return null; }
            }
        }

        private string fOBJImage;
        [Persistent("OBJIMAGENAMEPATH"), Size(150), DevExpress.Xpo.DisplayName("Image")]
        [DbType("varchar(150)")]
        [VisibleInListView(false)]
        public string OBJImage
        {
            get { return fOBJImage; }
            set { SetPropertyValue<string>("OBJImage", ref fOBJImage, value); }
        }

        //private string _UrlImage = string.Empty;
        //[NonPersistent, DevExpress.Xpo.DisplayName(@"image->")]
        ////   [Appearance("Planimetria.Url.visualizza", Criteria = "InModifica", Visibility = ViewItemVisibility.Hide)]//, Appearance("_Url_Indirizzo.Url", Enabled = false)
        //[EditorAlias("HperLinkDWF")]
        //public string UrlImage
        //{
        //    get
        //    {
        //        object tempFile = EvaluateAlias("ImageFNameFile");
        //        if (tempFile != null)
        //        {
        //            return String.Format(@"/CAD/WebFormCAD.aspx?{0}={1}&{2}={3}",
        //                "File", tempFile.ToString(),
        //                 "Tipo", "Image");
        //        }
        //        return null;
        //    }
        //    set
        //    {
        //        SetPropertyValue("UrlImage", ref _UrlImage, value);
        //    }
        //}


        #endregion



#region Liste Carica Combo Cluster Edificio Impianto Apparato

//private XPCollection<ClusterEdifici> fListaComboCluster;
//[System.ComponentModel.Browsable(false)] // Prohibits showing the AvailableAccessories collection separately 
//public XPCollection<ClusterEdifici> ListaComboCluster
//{
//    get
//    {
//        if (Apparato == null && this.Oid == -1)
//        {
//            if (fListaComboCluster == null)
//            {   ///   Toglie gli sk prec
//                List<int> TQAppaTogliere = Session.QueryInTransaction<MPDataContatore>()
//               .Where(w => w.Apparato != null)
//               .Where(w => w.Apparato.Impianto.Edificio.ClusterEdifici.Scenario == this.RegPianificazioneMP.Scenario)  //@@@  togli anche gli schedulati in precedenza
//               .Where(w => w.RegPianificazioneMP == this.RegPianificazioneMP)
//               .Select(s => s.Apparato.Oid).ToList();
//                /// sel gli app che hanno contaore
//                List<int> OidSel = Session.Query<ApparatoSchedaMP>()
//               .Where(w => w.Abilitato == FlgAbilitato.Si && w.Apparato.Impianto.Edificio.ClusterEdifici.Scenario == this.RegPianificazioneMP.Scenario)
//               .Where(w => w.TipologiaIntervento.Oid == 3)
//               .Where(w => !TQAppaTogliere.Contains(w.Apparato.Oid))
//               .Select(s => s.Apparato.Impianto.Edificio.ClusterEdifici.Oid).Distinct().ToList();

//                CriteriaOperator charFiltert = new InOperator("Oid", OidSel);
//                GroupOperator goc = new GroupOperator(GroupOperatorType.And, charFiltert);
//                fListaComboCluster = new XPCollection<ClusterEdifici>(Session, goc);
//            }

//        }
//        return fListaComboCluster; // Return the filtered collection of Accessory objects 
//    }
//}

//private XPCollection<Edificio> fListaComboEdificio;
//[System.ComponentModel.Browsable(false)] // Prohibits showing the AvailableAccessories collection separately 
//public XPCollection<Edificio> ListaComboEdificio
//{
//    get
//    {
//        if (Apparato == null && this.Oid == -1)
//        {
//            if (fListaComboEdificio == null)
//            {
//                ///   Toglie gli sk prec
//                List<int> TQAppaTogliere = Session.QueryInTransaction<MPDataContatore>()
//               .Where(w => w.Apparato != null)
//               .Where(w => w.Apparato.Impianto.Edificio.ClusterEdifici == this.ClusterEdifici)  //@@@  togli anche gli schedulati in precedenza
//               .Where(w => w.RegPianificazioneMP == this.RegPianificazioneMP)
//               .Select(s => s.Apparato.Oid).ToList();

//                /// sel gli app che hanno contaore
//                List<int> OidSel = Session.Query<ApparatoSchedaMP>()
//               .Where(w => w.Abilitato == FlgAbilitato.Si && w.Apparato.Impianto.Edificio.ClusterEdifici == this.ClusterEdifici)
//               .Where(w => w.TipologiaIntervento.Oid == 3)
//               .Where(w => !TQAppaTogliere.Contains(w.Apparato.Oid))
//               .Select(s => s.Apparato.Impianto.Edificio.Oid).Distinct().ToList();

//                CriteriaOperator charFiltert = new InOperator("Oid", OidSel);
//                GroupOperator goc = new GroupOperator(GroupOperatorType.And, charFiltert);
//                fListaComboEdificio = new XPCollection<Edificio>(Session, goc);
//            }
//        }
//        return fListaComboEdificio; // Return the filtered collection of Accessory objects 
//    }
//}

//private XPCollection<Impianto> fListaComboImpianto;
//[System.ComponentModel.Browsable(false)] // Prohibits showing the AvailableAccessories collection separately 
//public XPCollection<Impianto> ListaComboImpianto
//{
//    get
//    {
//        if (Apparato == null && this.Oid == -1)
//        {
//            if (ListaComboImpianto == null)
//            {
//                ///   Toglie gli sk prec
//                List<int> TQOidObjTogliere = Session.QueryInTransaction<MPDataContatore>()
//               .Where(w => w.Apparato != null)
//               .Where(w => w.RegPianificazioneMP == this.RegPianificazioneMP)
//               .Where(w => w.Apparato.Impianto.Edificio == this.Edificio)  //@@@  togli anche gli schedulati in precedenza
//               .Select(s => s.Apparato.Impianto.Oid).Distinct().ToList();

//                /// sel gli app che hanno contaore
//                List<int> OidSel = Session.Query<ApparatoSchedaMP>()
//               .Where(w => w.Abilitato == FlgAbilitato.Si && w.Apparato.Impianto.Edificio == this.Edificio)
//               .Where(w => w.TipologiaIntervento.Oid == 3)
//               .Where(w => !TQOidObjTogliere.Contains(w.Apparato.Impianto.Oid))
//               .Select(s => s.Apparato.Impianto.Oid).Distinct().ToList();

//                CriteriaOperator charFiltert = new InOperator("Oid", OidSel);
//                GroupOperator goc = new GroupOperator(GroupOperatorType.And, charFiltert);
//                fListaComboImpianto = new XPCollection<Impianto>(Session, goc);
//            }

//        }
//        return fListaComboImpianto; // Return the filtered collection of Accessory objects 
//    }
//}

#region RegionName
//private XPCollection<Apparato> fListaComboApp;
#endregion
//                ///   Toglie gli sk prec
//                /// sel gli app che hanno contaore
//                CriteriaOperator charFiltert = new InOperator("Oid", OidSel);
//                fListaComboApp = new XPCollection<Apparato>(Session, goc);
//                GroupOperator goc = new GroupOperator(GroupOperatorType.And, charFiltert);
//                List<int> OidSel = Session.Query<ApparatoSchedaMP>()
//                List<int> TQAppaTogliere = Session.QueryInTransaction<MPDataContatore>()
//               .Select(s => s.Apparato.Oid).ToList();
//               .Select(s => s.Apparato.Oid).ToList();
//               .Where(w => !TQAppaTogliere.Contains(w.Apparato.Oid))
//               .Where(w => w.Abilitato == FlgAbilitato.Si && w.Apparato.Impianto.Edificio.ClusterEdifici.Scenario == this.RegPianificazioneMP.Scenario)
//               .Where(w => w.Apparato != null)
//               .Where(w => w.Apparato.Impianto.Edificio.ClusterEdifici.Scenario == this.RegPianificazioneMP.Scenario)  //@@@  togli anche gli schedulati in precedenza
//               .Where(w => w.RegPianificazioneMP == this.RegPianificazioneMP)
//               .Where(w => w.TipologiaIntervento.Oid == 3)
//            {
//            }
//            if (fListaComboApp == null)
//        {
//        }
//        if (Apparato == null && this.Oid == -1)
//        return fListaComboApp; // Return the filtered collection of Accessory objects 
//    {
//    }
//    get
//[System.ComponentModel.Browsable(false)] // Prohibits showing the AvailableAccessories collection separately 
//{
//}
//public XPCollection<Apparato> ListaComboApp


#endregion

//  string Filtro = string.Format("Apparato = {0} And Categoria.Oid = 1 And TipologiaIntervento.Oid In(1,2) And Abilitato = 'Si' 
//And FrequenzaOpt.TipoCadenze !='Giorno' And FrequenzaOpt.CadenzeAnno >= 1", this.Apparato.Oid);
//fListaAppSkMpInseribili
//    List<int> OiddaEliminare = AppSkMPdaTogliere.Concat<int>(TQAppSkMPdaTogliere).ToList();

//                        DataTable contacts = ds.Tables["Contact"];
//DataTable orders = ds.Tables["SalesOrderHeader"];

//var query =
//    contacts.AsEnumerable().Join(orders.AsEnumerable(),
//    order => order.Field<Int32>("ContactID"),
//    contact => contact.Field<Int32>("ContactID"),
//    (contact, order) => new
//    {
//        ContactID = contact.Field<Int32>("ContactID"),
//        SalesOrderID = order.Field<Int32>("SalesOrderID"),
//        FirstName = contact.Field<string>("FirstName"),
//        Lastname = contact.Field<string>("Lastname"),
//        TotalDue = order.Field<decimal>("TotalDue")
//    });

//.Where(w => w.TipologiaIntervento.Oid == 1 || w.TipologiaIntervento.Oid == 2)
//.Where(w => w.Categoria.Oid == 1)
// .Where(w => w.FrequenzaOpt.CadenzeAnno >= 1 && w.FrequenzaOpt.TipoCadenze != TipoCadenze.Giorno)
// .Where(w => !OiddaEliminare.Contains(w.Oid))
//     // .Where(w => !AppSkMPdaTogliere.Contains(w.Oid))
// .Select(s => s.Oid).ToList();
// List<int> AppSkMPdaTogliere = Session.Query<MPDataContatore>()
//        .Where(d => d.Apparato == this.Apparato && d.RegPianificazioneMP == this.RegPianificazioneMP)
//        .Where(w=>w.Apparato.AppSchedaMpes.Single(
//       .Select(s => s.ApparatoSchedaMP.Oid).ToList();

// List<int> TQAppSkMPdaTogliere = Session.QueryInTransaction<MPDataContatore>()
//         .Where(d => d.Apparato == this.Apparato)
//         .Where(w => w.ApparatoSchedaMP != null)
//        .Select(s => s.ApparatoSchedaMP.Oid).ToList();

//var OidSel = new XPCollection<ApparatoSchedaMP>(Session)
//.Where(w => w.Abilitato == FlgAbilitato.Si)
//.Where(w => w.Apparato == this.Apparato)
//.Where(w => w.TipologiaIntervento.Oid == 1 || w.TipologiaIntervento.Oid == 2)
//.Where(w => w.Categoria.Oid == 1)
// .Where(w => w.FrequenzaOpt.CadenzeAnno >= 1 && w.FrequenzaOpt.TipoCadenze != TipoCadenze.Giorno)
// .Where(w => !TQAppSkMPdaTogliere.Contains(w.Oid))
//  .Where(w => !AppSkMPdaTogliere.Contains(w.Oid))
// .Select(s => s.Oid).ToList();
// List<int> OiddaEliminare = AppSkMPdaTogliere.Concat<int>(TQAppSkMPdaTogliere).ToList();
// var OidSel = Session.Query<ApparatoSchedaMP>()
//.Where(w => w.Abilitato == FlgAbilitato.Si)
//.Where(w => w.Apparato == this.Apparato)
//.Where(w => w.TipologiaIntervento.Oid == 1 || w.TipologiaIntervento.Oid == 2)
//.Where(w => w.Categoria.Oid == 1)
// .Where(w => w.FrequenzaOpt.CadenzeAnno >= 1 && w.FrequenzaOpt.TipoCadenze != TipoCadenze.Giorno)
// .Where(w => !OiddaEliminare.Contains(w.Oid))
//     // .Where(w => !AppSkMPdaTogliere.Contains(w.Oid))
// .Select(s => s.Oid).ToList();
//  fListaAppSkMpInseribili.Criteria = CriteriaOperator.Parse(Filtro);

//List<int> AppSkMPdaTogliere = Session.Query<MPDataFissa>()
//        .Where(d => d.Apparato == this.Apparato)
//       .Select(s => s.ApparatoSchedaMP.Oid).ToList();

//List<int> AppSkMPdaToglieret = Session.QueryInTransaction<MPDataFissa>()
//        .Where(d => d.Apparato == this.Apparato)
//        .Where(w => w.ApparatoSchedaMP != null)
////       .Select(s => s.ApparatoSchedaMP.Oid).ToList();

//List<int> OiddaEliminare = AppSkMPdaTogliere.Concat<int>(AppSkMPdaToglieret).ToList();
//List<int> Oidda = OidSel.Where(w => !OiddaEliminare.Contains(w)).ToList();









https://documentation.devexpress.com/#eXpressAppFramework/CustomDocument113114
How to: Customize a Built-in Property Editor (ASP.NET)

C#
VB
using System;
using System.Web.UI.WebControls;
using DevExpress.Web;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.Web.Editors.ASPx;
//... 
[PropertyEditor(typeof(DateTime), false)]
public class CustomDateTimeEditor : ASPxDateTimePropertyEditor {
    public CustomDateTimeEditor(Type objectType, IModelMemberViewItem info) : 
        base(objectType, info) { }
    protected override WebControl CreateEditModeControlCore() {
        ASPxDateEdit dateEdit = (ASPxDateEdit)base.CreateEditModeControlCore();
        dateEdit.TimeSectionProperties.Visible = true;
        dateEdit.UseMaskBehavior = true;
        return dateEdit;
    }
}







VERIFICARE SE LE RISORSE 
SONO ASSOCIABILI SOLO PER LO STESSO CENTRO OPERATIVO E MANSIONE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-------
Schedulazione e Blocco delle schedulazioni fatte.
-------
i campi della schedulazione sono:
Edificio
-------
Apparato //OK FATTO
fai lacopia dei peristent, aggiungento SK:
1) totale coefficienti
2) fSumTempoMp 
-------
ApparatoSchedeMP //OK FATTO
1) Mansione
2) Frequenza
3) tempo
4) num man (coppia lincata)

		((DevExpress.ExpressApp.ViewShortcut)(e.ActionArguments.SelectedChoiceActionItem.Data)).ViewId	"BaseObject_ListView"	string
---------------------
Thanks for your help.
I clarify:
the editor Region Should be disabled in the Province DetailView, only when its Invoked from the object addresses and / or in case the Indirizzi.Regione property is set.

Andrew L (DevExpress Support)5 hours ago
Hello Andrea,

Thank you for your clarification. To accomplish this task:
Create a clone of Provincia DetailView and LookupListView (by using a clone operation in the View's context menu).
Creare un clone della Provincia detailview e LookupListView (utilizzando un'operazione clone menu contestuale della vista).

Then, set the LookupListView.DetailView property to your newly created DetailView_Provincia_New, 
Quindi, impostare la proprietà LookupListView.DetailView al DetailView_Provincia_New appena creato,

open the Indirizzi_DetailView->Items->Provincia and set the View property to Provincia_LookupListView_New. 
aprire il Indirizzi_DetailView-> Articoli-> Provincia e impostare la proprietà View a Provincia_LookupListView_New.

After that, 
Dopo di che,
add an Appearance rule (from the Conditional Appearance Module Overview module) to conditionally disable the editor in the selected DetailView:
aggiungere una regola Aspetto (dal Aspetto Conditional Panoramica delle unità modulo) per disabilitare condizionalmente l'editor nella detailview selezionato:
[C#]Open in popup window
   [Appearance("Disable",AppearanceItemType = "ViewItem",TargetItems = "Regione",Criteria = "IsNewObject(This) AND Regione <> null",Context = "Provincia_DetailView_Copy",Enabled = false)]
   public class Provincia : BaseObject {
//....
}
 

 I have updated my previous answer with a sample illustrating how to accomplish this task. Please review it and let us know the results.


See also:
How to: Disable and Hide Property Editors Based on a Business Rule
